// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Employee is an object representing the database table.
type Employee struct {
	ID           string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Email        null.String  `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Position     null.String  `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	Balance      null.Float64 `boil:"balance" json:"balance,omitempty" toml:"balance" yaml:"balance,omitempty"`
	Average      null.Float64 `boil:"average" json:"average,omitempty" toml:"average" yaml:"average,omitempty"`
	Qrcode       null.String  `boil:"qrcode" json:"qrcode,omitempty" toml:"qrcode" yaml:"qrcode,omitempty"`
	PasswordHash null.String  `boil:"password_hash" json:"password_hash,omitempty" toml:"password_hash" yaml:"password_hash,omitempty"`
	Midia        null.String  `boil:"midia" json:"midia,omitempty" toml:"midia" yaml:"midia,omitempty"`

	R *employeeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L employeeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmployeeColumns = struct {
	ID           string
	Name         string
	Email        string
	Position     string
	Balance      string
	Average      string
	Qrcode       string
	PasswordHash string
	Midia        string
}{
	ID:           "id",
	Name:         "name",
	Email:        "email",
	Position:     "position",
	Balance:      "balance",
	Average:      "average",
	Qrcode:       "qrcode",
	PasswordHash: "password_hash",
	Midia:        "midia",
}

var EmployeeTableColumns = struct {
	ID           string
	Name         string
	Email        string
	Position     string
	Balance      string
	Average      string
	Qrcode       string
	PasswordHash string
	Midia        string
}{
	ID:           "employee.id",
	Name:         "employee.name",
	Email:        "employee.email",
	Position:     "employee.position",
	Balance:      "employee.balance",
	Average:      "employee.average",
	Qrcode:       "employee.qrcode",
	PasswordHash: "employee.password_hash",
	Midia:        "employee.midia",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var EmployeeWhere = struct {
	ID           whereHelperstring
	Name         whereHelpernull_String
	Email        whereHelpernull_String
	Position     whereHelpernull_String
	Balance      whereHelpernull_Float64
	Average      whereHelpernull_Float64
	Qrcode       whereHelpernull_String
	PasswordHash whereHelpernull_String
	Midia        whereHelpernull_String
}{
	ID:           whereHelperstring{field: "\"employee\".\"id\""},
	Name:         whereHelpernull_String{field: "\"employee\".\"name\""},
	Email:        whereHelpernull_String{field: "\"employee\".\"email\""},
	Position:     whereHelpernull_String{field: "\"employee\".\"position\""},
	Balance:      whereHelpernull_Float64{field: "\"employee\".\"balance\""},
	Average:      whereHelpernull_Float64{field: "\"employee\".\"average\""},
	Qrcode:       whereHelpernull_String{field: "\"employee\".\"qrcode\""},
	PasswordHash: whereHelpernull_String{field: "\"employee\".\"password_hash\""},
	Midia:        whereHelpernull_String{field: "\"employee\".\"midia\""},
}

// EmployeeRels is where relationship names are stored.
var EmployeeRels = struct {
	ReceiverFeedbacks string
	SenderFeedbacks   string
}{
	ReceiverFeedbacks: "ReceiverFeedbacks",
	SenderFeedbacks:   "SenderFeedbacks",
}

// employeeR is where relationships are stored.
type employeeR struct {
	ReceiverFeedbacks FeedbackSlice `boil:"ReceiverFeedbacks" json:"ReceiverFeedbacks" toml:"ReceiverFeedbacks" yaml:"ReceiverFeedbacks"`
	SenderFeedbacks   FeedbackSlice `boil:"SenderFeedbacks" json:"SenderFeedbacks" toml:"SenderFeedbacks" yaml:"SenderFeedbacks"`
}

// NewStruct creates a new relationship struct
func (*employeeR) NewStruct() *employeeR {
	return &employeeR{}
}

func (o *Employee) GetReceiverFeedbacks() FeedbackSlice {
	if o == nil {
		return nil
	}

	return o.R.GetReceiverFeedbacks()
}

func (r *employeeR) GetReceiverFeedbacks() FeedbackSlice {
	if r == nil {
		return nil
	}

	return r.ReceiverFeedbacks
}

func (o *Employee) GetSenderFeedbacks() FeedbackSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSenderFeedbacks()
}

func (r *employeeR) GetSenderFeedbacks() FeedbackSlice {
	if r == nil {
		return nil
	}

	return r.SenderFeedbacks
}

// employeeL is where Load methods for each relationship are stored.
type employeeL struct{}

var (
	employeeAllColumns            = []string{"id", "name", "email", "position", "balance", "average", "qrcode", "password_hash", "midia"}
	employeeColumnsWithoutDefault = []string{}
	employeeColumnsWithDefault    = []string{"id", "name", "email", "position", "balance", "average", "qrcode", "password_hash", "midia"}
	employeePrimaryKeyColumns     = []string{"id"}
	employeeGeneratedColumns      = []string{}
)

type (
	// EmployeeSlice is an alias for a slice of pointers to Employee.
	// This should almost always be used instead of []Employee.
	EmployeeSlice []*Employee
	// EmployeeHook is the signature for custom Employee hook methods
	EmployeeHook func(context.Context, boil.ContextExecutor, *Employee) error

	employeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	employeeType                 = reflect.TypeOf(&Employee{})
	employeeMapping              = queries.MakeStructMapping(employeeType)
	employeePrimaryKeyMapping, _ = queries.BindMapping(employeeType, employeeMapping, employeePrimaryKeyColumns)
	employeeInsertCacheMut       sync.RWMutex
	employeeInsertCache          = make(map[string]insertCache)
	employeeUpdateCacheMut       sync.RWMutex
	employeeUpdateCache          = make(map[string]updateCache)
	employeeUpsertCacheMut       sync.RWMutex
	employeeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var employeeAfterSelectMu sync.Mutex
var employeeAfterSelectHooks []EmployeeHook

var employeeBeforeInsertMu sync.Mutex
var employeeBeforeInsertHooks []EmployeeHook
var employeeAfterInsertMu sync.Mutex
var employeeAfterInsertHooks []EmployeeHook

var employeeBeforeUpdateMu sync.Mutex
var employeeBeforeUpdateHooks []EmployeeHook
var employeeAfterUpdateMu sync.Mutex
var employeeAfterUpdateHooks []EmployeeHook

var employeeBeforeDeleteMu sync.Mutex
var employeeBeforeDeleteHooks []EmployeeHook
var employeeAfterDeleteMu sync.Mutex
var employeeAfterDeleteHooks []EmployeeHook

var employeeBeforeUpsertMu sync.Mutex
var employeeBeforeUpsertHooks []EmployeeHook
var employeeAfterUpsertMu sync.Mutex
var employeeAfterUpsertHooks []EmployeeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Employee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Employee) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Employee) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Employee) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Employee) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Employee) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Employee) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Employee) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Employee) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmployeeHook registers your hook function for all future operations.
func AddEmployeeHook(hookPoint boil.HookPoint, employeeHook EmployeeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		employeeAfterSelectMu.Lock()
		employeeAfterSelectHooks = append(employeeAfterSelectHooks, employeeHook)
		employeeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		employeeBeforeInsertMu.Lock()
		employeeBeforeInsertHooks = append(employeeBeforeInsertHooks, employeeHook)
		employeeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		employeeAfterInsertMu.Lock()
		employeeAfterInsertHooks = append(employeeAfterInsertHooks, employeeHook)
		employeeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		employeeBeforeUpdateMu.Lock()
		employeeBeforeUpdateHooks = append(employeeBeforeUpdateHooks, employeeHook)
		employeeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		employeeAfterUpdateMu.Lock()
		employeeAfterUpdateHooks = append(employeeAfterUpdateHooks, employeeHook)
		employeeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		employeeBeforeDeleteMu.Lock()
		employeeBeforeDeleteHooks = append(employeeBeforeDeleteHooks, employeeHook)
		employeeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		employeeAfterDeleteMu.Lock()
		employeeAfterDeleteHooks = append(employeeAfterDeleteHooks, employeeHook)
		employeeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		employeeBeforeUpsertMu.Lock()
		employeeBeforeUpsertHooks = append(employeeBeforeUpsertHooks, employeeHook)
		employeeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		employeeAfterUpsertMu.Lock()
		employeeAfterUpsertHooks = append(employeeAfterUpsertHooks, employeeHook)
		employeeAfterUpsertMu.Unlock()
	}
}

// One returns a single employee record from the query.
func (q employeeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Employee, error) {
	o := &Employee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for employee")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Employee records from the query.
func (q employeeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmployeeSlice, error) {
	var o []*Employee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Employee slice")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Employee records in the query.
func (q employeeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count employee rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q employeeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if employee exists")
	}

	return count > 0, nil
}

// ReceiverFeedbacks retrieves all the feedback's Feedbacks with an executor via receiver_id column.
func (o *Employee) ReceiverFeedbacks(mods ...qm.QueryMod) feedbackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"feedback\".\"receiver_id\"=?", o.ID),
	)

	return Feedbacks(queryMods...)
}

// SenderFeedbacks retrieves all the feedback's Feedbacks with an executor via sender_id column.
func (o *Employee) SenderFeedbacks(mods ...qm.QueryMod) feedbackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"feedback\".\"sender_id\"=?", o.ID),
	)

	return Feedbacks(queryMods...)
}

// LoadReceiverFeedbacks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadReceiverFeedbacks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		var ok bool
		object, ok = maybeEmployee.(*Employee)
		if !ok {
			object = new(Employee)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmployee))
			}
		}
	} else {
		s, ok := maybeEmployee.(*[]*Employee)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmployee))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`feedback`),
		qm.WhereIn(`feedback.receiver_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load feedback")
	}

	var resultSlice []*Feedback
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice feedback")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on feedback")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for feedback")
	}

	if len(feedbackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReceiverFeedbacks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &feedbackR{}
			}
			foreign.R.Receiver = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ReceiverID {
				local.R.ReceiverFeedbacks = append(local.R.ReceiverFeedbacks, foreign)
				if foreign.R == nil {
					foreign.R = &feedbackR{}
				}
				foreign.R.Receiver = local
				break
			}
		}
	}

	return nil
}

// LoadSenderFeedbacks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadSenderFeedbacks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		var ok bool
		object, ok = maybeEmployee.(*Employee)
		if !ok {
			object = new(Employee)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmployee))
			}
		}
	} else {
		s, ok := maybeEmployee.(*[]*Employee)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmployee))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`feedback`),
		qm.WhereIn(`feedback.sender_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load feedback")
	}

	var resultSlice []*Feedback
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice feedback")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on feedback")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for feedback")
	}

	if len(feedbackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SenderFeedbacks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &feedbackR{}
			}
			foreign.R.Sender = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SenderID {
				local.R.SenderFeedbacks = append(local.R.SenderFeedbacks, foreign)
				if foreign.R == nil {
					foreign.R = &feedbackR{}
				}
				foreign.R.Sender = local
				break
			}
		}
	}

	return nil
}

// AddReceiverFeedbacks adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.ReceiverFeedbacks.
// Sets related.R.Receiver appropriately.
func (o *Employee) AddReceiverFeedbacks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Feedback) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReceiverID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"feedback\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"receiver_id"}),
				strmangle.WhereClause("\"", "\"", 2, feedbackPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReceiverID = o.ID
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			ReceiverFeedbacks: related,
		}
	} else {
		o.R.ReceiverFeedbacks = append(o.R.ReceiverFeedbacks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &feedbackR{
				Receiver: o,
			}
		} else {
			rel.R.Receiver = o
		}
	}
	return nil
}

// AddSenderFeedbacks adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.SenderFeedbacks.
// Sets related.R.Sender appropriately.
func (o *Employee) AddSenderFeedbacks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Feedback) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SenderID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"feedback\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sender_id"}),
				strmangle.WhereClause("\"", "\"", 2, feedbackPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SenderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			SenderFeedbacks: related,
		}
	} else {
		o.R.SenderFeedbacks = append(o.R.SenderFeedbacks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &feedbackR{
				Sender: o,
			}
		} else {
			rel.R.Sender = o
		}
	}
	return nil
}

// Employees retrieves all the records using an executor.
func Employees(mods ...qm.QueryMod) employeeQuery {
	mods = append(mods, qm.From("\"employee\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"employee\".*"})
	}

	return employeeQuery{q}
}

// FindEmployee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmployee(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Employee, error) {
	employeeObj := &Employee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"employee\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, employeeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from employee")
	}

	if err = employeeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return employeeObj, err
	}

	return employeeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Employee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no employee provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	employeeInsertCacheMut.RLock()
	cache, cached := employeeInsertCache[key]
	employeeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"employee\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"employee\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into employee")
	}

	if !cached {
		employeeInsertCacheMut.Lock()
		employeeInsertCache[key] = cache
		employeeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Employee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Employee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	employeeUpdateCacheMut.RLock()
	cache, cached := employeeUpdateCache[key]
	employeeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update employee, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"employee\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, employeePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, append(wl, employeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update employee row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for employee")
	}

	if !cached {
		employeeUpdateCacheMut.Lock()
		employeeUpdateCache[key] = cache
		employeeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q employeeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for employee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for employee")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmployeeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"employee\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, employeePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all employee")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Employee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no employee provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	employeeUpsertCacheMut.RLock()
	cache, cached := employeeUpsertCache[key]
	employeeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert employee, could not build update column list")
		}

		ret := strmangle.SetComplement(employeeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(employeePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert employee, could not build conflict column list")
			}

			conflict = make([]string, len(employeePrimaryKeyColumns))
			copy(conflict, employeePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"employee\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert employee")
	}

	if !cached {
		employeeUpsertCacheMut.Lock()
		employeeUpsertCache[key] = cache
		employeeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Employee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Employee) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Employee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), employeePrimaryKeyMapping)
	sql := "DELETE FROM \"employee\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from employee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for employee")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q employeeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no employeeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employee")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmployeeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(employeeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"employee\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, employeePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for employee")
	}

	if len(employeeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Employee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmployee(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmployeeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmployeeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"employee\".* FROM \"employee\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, employeePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmployeeSlice")
	}

	*o = slice

	return nil
}

// EmployeeExists checks if the Employee row exists.
func EmployeeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"employee\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if employee exists")
	}

	return exists, nil
}

// Exists checks if the Employee row exists.
func (o *Employee) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EmployeeExists(ctx, exec, o.ID)
}
