// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFeedbacks(t *testing.T) {
	t.Parallel()

	query := Feedbacks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFeedbacksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFeedbacksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Feedbacks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFeedbacksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FeedbackSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFeedbacksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FeedbackExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Feedback exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FeedbackExists to return true, but got false.")
	}
}

func testFeedbacksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	feedbackFound, err := FindFeedback(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if feedbackFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFeedbacksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Feedbacks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFeedbacksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Feedbacks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFeedbacksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	feedbackOne := &Feedback{}
	feedbackTwo := &Feedback{}
	if err = randomize.Struct(seed, feedbackOne, feedbackDBTypes, false, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}
	if err = randomize.Struct(seed, feedbackTwo, feedbackDBTypes, false, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = feedbackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = feedbackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Feedbacks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFeedbacksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	feedbackOne := &Feedback{}
	feedbackTwo := &Feedback{}
	if err = randomize.Struct(seed, feedbackOne, feedbackDBTypes, false, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}
	if err = randomize.Struct(seed, feedbackTwo, feedbackDBTypes, false, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = feedbackOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = feedbackTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func feedbackBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Feedback) error {
	*o = Feedback{}
	return nil
}

func feedbackAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Feedback) error {
	*o = Feedback{}
	return nil
}

func feedbackAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Feedback) error {
	*o = Feedback{}
	return nil
}

func feedbackBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Feedback) error {
	*o = Feedback{}
	return nil
}

func feedbackAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Feedback) error {
	*o = Feedback{}
	return nil
}

func feedbackBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Feedback) error {
	*o = Feedback{}
	return nil
}

func feedbackAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Feedback) error {
	*o = Feedback{}
	return nil
}

func feedbackBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Feedback) error {
	*o = Feedback{}
	return nil
}

func feedbackAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Feedback) error {
	*o = Feedback{}
	return nil
}

func testFeedbacksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Feedback{}
	o := &Feedback{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, feedbackDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Feedback object: %s", err)
	}

	AddFeedbackHook(boil.BeforeInsertHook, feedbackBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	feedbackBeforeInsertHooks = []FeedbackHook{}

	AddFeedbackHook(boil.AfterInsertHook, feedbackAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	feedbackAfterInsertHooks = []FeedbackHook{}

	AddFeedbackHook(boil.AfterSelectHook, feedbackAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	feedbackAfterSelectHooks = []FeedbackHook{}

	AddFeedbackHook(boil.BeforeUpdateHook, feedbackBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	feedbackBeforeUpdateHooks = []FeedbackHook{}

	AddFeedbackHook(boil.AfterUpdateHook, feedbackAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	feedbackAfterUpdateHooks = []FeedbackHook{}

	AddFeedbackHook(boil.BeforeDeleteHook, feedbackBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	feedbackBeforeDeleteHooks = []FeedbackHook{}

	AddFeedbackHook(boil.AfterDeleteHook, feedbackAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	feedbackAfterDeleteHooks = []FeedbackHook{}

	AddFeedbackHook(boil.BeforeUpsertHook, feedbackBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	feedbackBeforeUpsertHooks = []FeedbackHook{}

	AddFeedbackHook(boil.AfterUpsertHook, feedbackAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	feedbackAfterUpsertHooks = []FeedbackHook{}
}

func testFeedbacksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFeedbacksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(feedbackPrimaryKeyColumns, feedbackColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFeedbackToOneEmployeeUsingReceiver(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Feedback
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, feedbackDBTypes, false, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ReceiverID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Receiver().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddEmployeeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Employee) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FeedbackSlice{&local}
	if err = local.L.LoadReceiver(ctx, tx, false, (*[]*Feedback)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Receiver == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Receiver = nil
	if err = local.L.LoadReceiver(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Receiver == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFeedbackToOneEmployeeUsingSender(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Feedback
	var foreign Employee

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, feedbackDBTypes, false, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, employeeDBTypes, false, employeeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Employee struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SenderID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sender().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddEmployeeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Employee) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FeedbackSlice{&local}
	if err = local.L.LoadSender(ctx, tx, false, (*[]*Feedback)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sender == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sender = nil
	if err = local.L.LoadSender(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sender == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFeedbackToOneSetOpEmployeeUsingReceiver(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Feedback
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, feedbackDBTypes, false, strmangle.SetComplement(feedbackPrimaryKeyColumns, feedbackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetReceiver(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Receiver != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ReceiverFeedbacks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ReceiverID != x.ID {
			t.Error("foreign key was wrong value", a.ReceiverID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ReceiverID))
		reflect.Indirect(reflect.ValueOf(&a.ReceiverID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ReceiverID != x.ID {
			t.Error("foreign key was wrong value", a.ReceiverID, x.ID)
		}
	}
}
func testFeedbackToOneSetOpEmployeeUsingSender(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Feedback
	var b, c Employee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, feedbackDBTypes, false, strmangle.SetComplement(feedbackPrimaryKeyColumns, feedbackColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, employeeDBTypes, false, strmangle.SetComplement(employeePrimaryKeyColumns, employeeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Employee{&b, &c} {
		err = a.SetSender(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sender != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SenderFeedbacks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SenderID != x.ID {
			t.Error("foreign key was wrong value", a.SenderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SenderID))
		reflect.Indirect(reflect.ValueOf(&a.SenderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SenderID != x.ID {
			t.Error("foreign key was wrong value", a.SenderID, x.ID)
		}
	}
}

func testFeedbacksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFeedbacksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FeedbackSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFeedbacksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Feedbacks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	feedbackDBTypes = map[string]string{`ID`: `uuid`, `SenderID`: `uuid`, `ReceiverID`: `uuid`, `Stars`: `integer`, `Description`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testFeedbacksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(feedbackPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(feedbackAllColumns) == len(feedbackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFeedbacksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(feedbackAllColumns) == len(feedbackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Feedback{}
	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, feedbackDBTypes, true, feedbackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(feedbackAllColumns, feedbackPrimaryKeyColumns) {
		fields = feedbackAllColumns
	} else {
		fields = strmangle.SetComplement(
			feedbackAllColumns,
			feedbackPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FeedbackSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFeedbacksUpsert(t *testing.T) {
	t.Parallel()

	if len(feedbackAllColumns) == len(feedbackPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Feedback{}
	if err = randomize.Struct(seed, &o, feedbackDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Feedback: %s", err)
	}

	count, err := Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, feedbackDBTypes, false, feedbackPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Feedback struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Feedback: %s", err)
	}

	count, err = Feedbacks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
