// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testResources(t *testing.T) {
	t.Parallel()

	query := Resources()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testResourcesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResourcesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Resources().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResourcesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ResourceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResourcesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ResourceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Resource exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ResourceExists to return true, but got false.")
	}
}

func testResourcesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	resourceFound, err := FindResource(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if resourceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testResourcesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Resources().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testResourcesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Resources().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testResourcesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resourceOne := &Resource{}
	resourceTwo := &Resource{}
	if err = randomize.Struct(seed, resourceOne, resourceDBTypes, false, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}
	if err = randomize.Struct(seed, resourceTwo, resourceDBTypes, false, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = resourceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = resourceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Resources().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testResourcesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	resourceOne := &Resource{}
	resourceTwo := &Resource{}
	if err = randomize.Struct(seed, resourceOne, resourceDBTypes, false, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}
	if err = randomize.Struct(seed, resourceTwo, resourceDBTypes, false, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = resourceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = resourceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func resourceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Resource) error {
	*o = Resource{}
	return nil
}

func resourceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Resource) error {
	*o = Resource{}
	return nil
}

func resourceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Resource) error {
	*o = Resource{}
	return nil
}

func resourceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Resource) error {
	*o = Resource{}
	return nil
}

func resourceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Resource) error {
	*o = Resource{}
	return nil
}

func resourceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Resource) error {
	*o = Resource{}
	return nil
}

func resourceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Resource) error {
	*o = Resource{}
	return nil
}

func resourceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Resource) error {
	*o = Resource{}
	return nil
}

func resourceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Resource) error {
	*o = Resource{}
	return nil
}

func testResourcesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Resource{}
	o := &Resource{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, resourceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Resource object: %s", err)
	}

	AddResourceHook(boil.BeforeInsertHook, resourceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	resourceBeforeInsertHooks = []ResourceHook{}

	AddResourceHook(boil.AfterInsertHook, resourceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	resourceAfterInsertHooks = []ResourceHook{}

	AddResourceHook(boil.AfterSelectHook, resourceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	resourceAfterSelectHooks = []ResourceHook{}

	AddResourceHook(boil.BeforeUpdateHook, resourceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	resourceBeforeUpdateHooks = []ResourceHook{}

	AddResourceHook(boil.AfterUpdateHook, resourceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	resourceAfterUpdateHooks = []ResourceHook{}

	AddResourceHook(boil.BeforeDeleteHook, resourceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	resourceBeforeDeleteHooks = []ResourceHook{}

	AddResourceHook(boil.AfterDeleteHook, resourceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	resourceAfterDeleteHooks = []ResourceHook{}

	AddResourceHook(boil.BeforeUpsertHook, resourceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	resourceBeforeUpsertHooks = []ResourceHook{}

	AddResourceHook(boil.AfterUpsertHook, resourceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	resourceAfterUpsertHooks = []ResourceHook{}
}

func testResourcesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResourcesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(resourcePrimaryKeyColumns, resourceColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResourcesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testResourcesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ResourceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testResourcesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Resources().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	resourceDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `Type`: `character varying`, `Midia`: `text`, `Average`: `double precision`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Image`: `character varying`}
	_               = bytes.MinRead
)

func testResourcesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(resourcePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(resourceAllColumns) == len(resourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testResourcesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(resourceAllColumns) == len(resourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Resource{}
	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, resourceDBTypes, true, resourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(resourceAllColumns, resourcePrimaryKeyColumns) {
		fields = resourceAllColumns
	} else {
		fields = strmangle.SetComplement(
			resourceAllColumns,
			resourcePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ResourceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testResourcesUpsert(t *testing.T) {
	t.Parallel()

	if len(resourceAllColumns) == len(resourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Resource{}
	if err = randomize.Struct(seed, &o, resourceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Resource: %s", err)
	}

	count, err := Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, resourceDBTypes, false, resourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Resource struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Resource: %s", err)
	}

	count, err = Resources().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
