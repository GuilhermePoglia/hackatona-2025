// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Activities", testActivities)
	t.Run("Employees", testEmployees)
	t.Run("Feedbacks", testFeedbacks)
	t.Run("Resources", testResources)
}

func TestDelete(t *testing.T) {
	t.Run("Activities", testActivitiesDelete)
	t.Run("Employees", testEmployeesDelete)
	t.Run("Feedbacks", testFeedbacksDelete)
	t.Run("Resources", testResourcesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Activities", testActivitiesQueryDeleteAll)
	t.Run("Employees", testEmployeesQueryDeleteAll)
	t.Run("Feedbacks", testFeedbacksQueryDeleteAll)
	t.Run("Resources", testResourcesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Activities", testActivitiesSliceDeleteAll)
	t.Run("Employees", testEmployeesSliceDeleteAll)
	t.Run("Feedbacks", testFeedbacksSliceDeleteAll)
	t.Run("Resources", testResourcesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Activities", testActivitiesExists)
	t.Run("Employees", testEmployeesExists)
	t.Run("Feedbacks", testFeedbacksExists)
	t.Run("Resources", testResourcesExists)
}

func TestFind(t *testing.T) {
	t.Run("Activities", testActivitiesFind)
	t.Run("Employees", testEmployeesFind)
	t.Run("Feedbacks", testFeedbacksFind)
	t.Run("Resources", testResourcesFind)
}

func TestBind(t *testing.T) {
	t.Run("Activities", testActivitiesBind)
	t.Run("Employees", testEmployeesBind)
	t.Run("Feedbacks", testFeedbacksBind)
	t.Run("Resources", testResourcesBind)
}

func TestOne(t *testing.T) {
	t.Run("Activities", testActivitiesOne)
	t.Run("Employees", testEmployeesOne)
	t.Run("Feedbacks", testFeedbacksOne)
	t.Run("Resources", testResourcesOne)
}

func TestAll(t *testing.T) {
	t.Run("Activities", testActivitiesAll)
	t.Run("Employees", testEmployeesAll)
	t.Run("Feedbacks", testFeedbacksAll)
	t.Run("Resources", testResourcesAll)
}

func TestCount(t *testing.T) {
	t.Run("Activities", testActivitiesCount)
	t.Run("Employees", testEmployeesCount)
	t.Run("Feedbacks", testFeedbacksCount)
	t.Run("Resources", testResourcesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Activities", testActivitiesHooks)
	t.Run("Employees", testEmployeesHooks)
	t.Run("Feedbacks", testFeedbacksHooks)
	t.Run("Resources", testResourcesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Activities", testActivitiesInsert)
	t.Run("Activities", testActivitiesInsertWhitelist)
	t.Run("Employees", testEmployeesInsert)
	t.Run("Employees", testEmployeesInsertWhitelist)
	t.Run("Feedbacks", testFeedbacksInsert)
	t.Run("Feedbacks", testFeedbacksInsertWhitelist)
	t.Run("Resources", testResourcesInsert)
	t.Run("Resources", testResourcesInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Activities", testActivitiesReload)
	t.Run("Employees", testEmployeesReload)
	t.Run("Feedbacks", testFeedbacksReload)
	t.Run("Resources", testResourcesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Activities", testActivitiesReloadAll)
	t.Run("Employees", testEmployeesReloadAll)
	t.Run("Feedbacks", testFeedbacksReloadAll)
	t.Run("Resources", testResourcesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Activities", testActivitiesSelect)
	t.Run("Employees", testEmployeesSelect)
	t.Run("Feedbacks", testFeedbacksSelect)
	t.Run("Resources", testResourcesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Activities", testActivitiesUpdate)
	t.Run("Employees", testEmployeesUpdate)
	t.Run("Feedbacks", testFeedbacksUpdate)
	t.Run("Resources", testResourcesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Activities", testActivitiesSliceUpdateAll)
	t.Run("Employees", testEmployeesSliceUpdateAll)
	t.Run("Feedbacks", testFeedbacksSliceUpdateAll)
	t.Run("Resources", testResourcesSliceUpdateAll)
}
